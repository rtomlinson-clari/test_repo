 plugins {
    id 'java'
 }

group 'com.clari'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceSets {
    itest {
        println "This is the compile classpath of itest"
        println compileClasspath
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java {
            //srcDirs("src/itest")
        }
    }
}
//
test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    //useJUnitPlatform()
}
//
configurations {
    itestImplementation.extendsFrom(testImplementation)
    itestRuntimeOnly.extendsFrom(testRuntimeOnly)
}
//
dependencies {
    implementation('org.apache.httpcomponents:httpclient:4.5.12')
    implementation('com.google.inject:guice:4.1.0')
//    implementation files("$buildDir/classes") {
//        builtBy 'compile'
//    }
//    implementation project(':banana')
    testImplementation('junit:junit:4.12')

    itestImplementation('com.google.guava:guava:29.0-jre')
    //testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    //testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}
//
//task itest(type: Test) {
//    description = "Run integration tests"
//    group = "verification"
//    testClassesDirs = sourceSets.itest.output.classesDirs
//    classpath = sourceSets.itest.runtimeClasspath
//}
//
//itest {
//    testLogging {
//        events "passed", "skipped", "failed"
//    }
//    //useJUnitPlatform()
//}
//
//task compile {
//    doLast {
//        println "compiling classes"
//    }
//}
//
//task list(dependsOn: configurations.compileClasspath) {
//    doLast {
//        println "$buildDir"
//        println "classpath = ${configurations.compileClasspath.collect { File file -> file.name}}"
//    }
//}

task printSourceSetInformation(){
    doLast {
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""
        }
        configurations.each {
            println it.name
            println it.hierarchy
        }
    }
}

allprojects {
    afterEvaluate { subproject ->
        println "Running after evaluate of ${subproject.name}"
//        if (subproject.hasTests == "true") {
//            println "Adding test task to $subproject"
//            subproject.task('test') {
//                it.doLast {
//                    println "Running tests for $subproject"
//                }
//            }
//        }
    }
}

 gradle.afterProject { project ->
     if (project.state.failure) {
         println "Evaluation of $project FAILED"
     } else {
         println "Evaluation of $project succeeded"
     }
 }

println "this is executed during configuration phase. root proj"

tasks.register("configured") {
    println "This is also executed during the configuration phase, because :configured is used in the build"
}

//tasks.register("test") {
//    it.doLast {
//        println "This is executed during the execution phase"
//    }
//}

tasks.register("testBoth") {
    it.doFirst {
        println "This is executed first during the execution phase"
    }
    it.doLast {
        println "This is executed last during the execution phase"
    }
    println "This is executed during the configuration phase as well, because :testBoth is used in the build"
}


